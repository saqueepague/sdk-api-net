/*
 * Saque e Pague Transaction
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.17.0
 * Contact: captura_atm@saqueepague.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Informações da resposta de requisição de agendamento de pagameto.
    /// </summary>
    [DataContract]
    public partial class InfAgendamentoResp : IEquatable<InfAgendamentoResp>
    { 
        /// <summary>
        /// Código de barras (44 dígitos).
        /// </summary>
        /// <value>Código de barras (44 dígitos).</value>
        [DataMember(Name="codigoBarras")]
        public string CodigoBarras { get; set; }
        /// <summary>
        /// Gets or Sets ModoEntrada
        /// </summary>
        public enum eModoEntrada1
        { 
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0Enum = 1,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1Enum = 2
        }

        /// <summary>
        /// Gets or Sets ModoEntrada
        /// </summary>
        [DataMember(Name="modoEntrada")]
        public eModoEntrada1? ModoEntrada { get; set; }

        /// <summary>
        /// Cedente (até 40 caracteres).
        /// </summary>
        /// <value>Cedente (até 40 caracteres).</value>
        [DataMember(Name="cedente")]
        public string Cedente { get; set; }

        /// <summary>
        /// Data de pagamento atualizada pelo host (AAAAMMDD).
        /// </summary>
        /// <value>Data de pagamento atualizada pelo host (AAAAMMDD).</value>
        [DataMember(Name="dataPagamento")]
        public string DataPagamento { get; set; }
        /// <summary>
        /// Gets or Sets Modificado
        /// </summary>
        public enum eModificado
        { 
            /// <summary>
            /// Enum _00Enum for 00
            /// </summary>
            [EnumMember(Value = "00")]
            _00Enum = 1,
            
            /// <summary>
            /// Enum _01Enum for 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01Enum = 2
        }

        /// <summary>
        /// Gets or Sets Modificado
        /// </summary>
        [DataMember(Name="modificado")]
        public eModificado? Modificado { get; set; }

        /// <summary>
        /// Valor nominal do documento (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor nominal do documento (12 dígitos, incluindo centavos).</value>
        [DataMember(Name="valorNominal")]
        public string ValorNominal { get; set; }

        /// <summary>
        /// Valor dos juros calculados (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor dos juros calculados (12 dígitos, incluindo centavos).</value>
        [DataMember(Name="valorJurosCalculado")]
        public string ValorJurosCalculado { get; set; }

        /// <summary>
        /// Valor da multa calculada (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor da multa calculada (12 dígitos, incluindo centavos).</value>
        [DataMember(Name="valorMultaCalculadada")]
        public string ValorMultaCalculadada { get; set; }

        /// <summary>
        /// Valor de abatimento/desconto calculado (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor de abatimento/desconto calculado (12 dígitos, incluindo centavos).</value>
        [DataMember(Name="valorAbatimento")]
        public string ValorAbatimento { get; set; }

        /// <summary>
        /// Valor total calculado (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor total calculado (12 dígitos, incluindo centavos).</value>
        [DataMember(Name="valorTotal")]
        public string ValorTotal { get; set; }

        /// <summary>
        /// Recibo imprimível do agendamento. Linhas com 48 posições separadas por &#39;@&#39;.
        /// </summary>
        /// <value>Recibo imprimível do agendamento. Linhas com 48 posições separadas por &#39;@&#39;.</value>
        [DataMember(Name="recibo")]
        public string Recibo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfAgendamentoResp {\n");
            sb.Append("  CodigoBarras: ").Append(CodigoBarras).Append("\n");
            sb.Append("  ModoEntrada: ").Append(ModoEntrada).Append("\n");
            sb.Append("  Cedente: ").Append(Cedente).Append("\n");
            sb.Append("  DataPagamento: ").Append(DataPagamento).Append("\n");
            sb.Append("  Modificado: ").Append(Modificado).Append("\n");
            sb.Append("  ValorNominal: ").Append(ValorNominal).Append("\n");
            sb.Append("  ValorJurosCalculado: ").Append(ValorJurosCalculado).Append("\n");
            sb.Append("  ValorMultaCalculadada: ").Append(ValorMultaCalculadada).Append("\n");
            sb.Append("  ValorAbatimento: ").Append(ValorAbatimento).Append("\n");
            sb.Append("  ValorTotal: ").Append(ValorTotal).Append("\n");
            sb.Append("  Recibo: ").Append(Recibo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfAgendamentoResp)obj);
        }

        /// <summary>
        /// Returns true if InfAgendamentoResp instances are equal
        /// </summary>
        /// <param name="other">Instance of InfAgendamentoResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfAgendamentoResp other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CodigoBarras == other.CodigoBarras ||
                    CodigoBarras != null &&
                    CodigoBarras.Equals(other.CodigoBarras)
                ) && 
                (
                    ModoEntrada == other.ModoEntrada ||
                    ModoEntrada != null &&
                    ModoEntrada.Equals(other.ModoEntrada)
                ) && 
                (
                    Cedente == other.Cedente ||
                    Cedente != null &&
                    Cedente.Equals(other.Cedente)
                ) && 
                (
                    DataPagamento == other.DataPagamento ||
                    DataPagamento != null &&
                    DataPagamento.Equals(other.DataPagamento)
                ) && 
                (
                    Modificado == other.Modificado ||
                    Modificado != null &&
                    Modificado.Equals(other.Modificado)
                ) && 
                (
                    ValorNominal == other.ValorNominal ||
                    ValorNominal != null &&
                    ValorNominal.Equals(other.ValorNominal)
                ) && 
                (
                    ValorJurosCalculado == other.ValorJurosCalculado ||
                    ValorJurosCalculado != null &&
                    ValorJurosCalculado.Equals(other.ValorJurosCalculado)
                ) && 
                (
                    ValorMultaCalculadada == other.ValorMultaCalculadada ||
                    ValorMultaCalculadada != null &&
                    ValorMultaCalculadada.Equals(other.ValorMultaCalculadada)
                ) && 
                (
                    ValorAbatimento == other.ValorAbatimento ||
                    ValorAbatimento != null &&
                    ValorAbatimento.Equals(other.ValorAbatimento)
                ) && 
                (
                    ValorTotal == other.ValorTotal ||
                    ValorTotal != null &&
                    ValorTotal.Equals(other.ValorTotal)
                ) && 
                (
                    Recibo == other.Recibo ||
                    Recibo != null &&
                    Recibo.Equals(other.Recibo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CodigoBarras != null)
                    hashCode = hashCode * 59 + CodigoBarras.GetHashCode();
                    if (ModoEntrada != null)
                    hashCode = hashCode * 59 + ModoEntrada.GetHashCode();
                    if (Cedente != null)
                    hashCode = hashCode * 59 + Cedente.GetHashCode();
                    if (DataPagamento != null)
                    hashCode = hashCode * 59 + DataPagamento.GetHashCode();
                    if (Modificado != null)
                    hashCode = hashCode * 59 + Modificado.GetHashCode();
                    if (ValorNominal != null)
                    hashCode = hashCode * 59 + ValorNominal.GetHashCode();
                    if (ValorJurosCalculado != null)
                    hashCode = hashCode * 59 + ValorJurosCalculado.GetHashCode();
                    if (ValorMultaCalculadada != null)
                    hashCode = hashCode * 59 + ValorMultaCalculadada.GetHashCode();
                    if (ValorAbatimento != null)
                    hashCode = hashCode * 59 + ValorAbatimento.GetHashCode();
                    if (ValorTotal != null)
                    hashCode = hashCode * 59 + ValorTotal.GetHashCode();
                    if (Recibo != null)
                    hashCode = hashCode * 59 + Recibo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfAgendamentoResp left, InfAgendamentoResp right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfAgendamentoResp left, InfAgendamentoResp right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
