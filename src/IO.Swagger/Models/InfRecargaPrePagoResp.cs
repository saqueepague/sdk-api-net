/*
 * Saque e Pague Transacional
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.18.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Informações de retorno da recarga de celular pré-pago.
    /// </summary>
    [DataContract]
    public partial class InfRecargaPrePagoResp : IEquatable<InfRecargaPrePagoResp>
    { 
        /// <summary>
        /// Código de identificação da recarga efetuada pela operadora, em caso de sucesso.
        /// </summary>
        /// <value>Código de identificação da recarga efetuada pela operadora, em caso de sucesso.</value>
        [Required]
        [DataMember(Name="idRecarga")]
        public string IdRecarga { get; set; }

        /// <summary>
        /// Bônus adicional recebido na recarga pré-pago.
        /// </summary>
        /// <value>Bônus adicional recebido na recarga pré-pago.</value>
        [DataMember(Name="bonus")]
        public string Bonus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfRecargaPrePagoResp {\n");
            sb.Append("  IdRecarga: ").Append(IdRecarga).Append("\n");
            sb.Append("  Bonus: ").Append(Bonus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfRecargaPrePagoResp)obj);
        }

        /// <summary>
        /// Returns true if InfRecargaPrePagoResp instances are equal
        /// </summary>
        /// <param name="other">Instance of InfRecargaPrePagoResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfRecargaPrePagoResp other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdRecarga == other.IdRecarga ||
                    IdRecarga != null &&
                    IdRecarga.Equals(other.IdRecarga)
                ) && 
                (
                    Bonus == other.Bonus ||
                    Bonus != null &&
                    Bonus.Equals(other.Bonus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdRecarga != null)
                    hashCode = hashCode * 59 + IdRecarga.GetHashCode();
                    if (Bonus != null)
                    hashCode = hashCode * 59 + Bonus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfRecargaPrePagoResp left, InfRecargaPrePagoResp right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfRecargaPrePagoResp left, InfRecargaPrePagoResp right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
