/*
 * Saque e Pague Transacional
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.17.1-sw2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InfPagamentoReqGps : IEquatable<InfPagamentoReqGps>
    { 
        /// <summary>
        /// Código da Guia da Previdência Social (GPS).
        /// </summary>
        /// <value>Código da Guia da Previdência Social (GPS).</value>
        [Required]
        [DataMember(Name="codPagamento")]
        public string CodPagamento { get; set; }

        /// <summary>
        /// Data de competência (AAAAMMDD).
        /// </summary>
        /// <value>Data de competência (AAAAMMDD).</value>
        [Required]
        [DataMember(Name="dataCompetencia")]
        public string DataCompetencia { get; set; }

        /// <summary>
        /// Identificador da guia.
        /// </summary>
        /// <value>Identificador da guia.</value>
        [Required]
        [DataMember(Name="identificador")]
        public string Identificador { get; set; }

        /// <summary>
        /// Valor do INSS (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor do INSS (12 dígitos, incluindo centavos).</value>
        [Required]
        [DataMember(Name="valorInss")]
        public string ValorInss { get; set; }

        /// <summary>
        /// Valor associado a ATM/Multa e Juros (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor associado a ATM/Multa e Juros (12 dígitos, incluindo centavos).</value>
        [Required]
        [DataMember(Name="valorMulta")]
        public string ValorMulta { get; set; }

        /// <summary>
        /// Valor de outras entidades (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor de outras entidades (12 dígitos, incluindo centavos).</value>
        [Required]
        [DataMember(Name="valorOutros")]
        public string ValorOutros { get; set; }

        /// <summary>
        /// Valor total da Guia da Previdência Social (GPS, 12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor total da Guia da Previdência Social (GPS, 12 dígitos, incluindo centavos).</value>
        [Required]
        [DataMember(Name="valorTotal")]
        public string ValorTotal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfPagamentoReqGps {\n");
            sb.Append("  CodPagamento: ").Append(CodPagamento).Append("\n");
            sb.Append("  DataCompetencia: ").Append(DataCompetencia).Append("\n");
            sb.Append("  Identificador: ").Append(Identificador).Append("\n");
            sb.Append("  ValorInss: ").Append(ValorInss).Append("\n");
            sb.Append("  ValorMulta: ").Append(ValorMulta).Append("\n");
            sb.Append("  ValorOutros: ").Append(ValorOutros).Append("\n");
            sb.Append("  ValorTotal: ").Append(ValorTotal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfPagamentoReqGps)obj);
        }

        /// <summary>
        /// Returns true if InfPagamentoReqGps instances are equal
        /// </summary>
        /// <param name="other">Instance of InfPagamentoReqGps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfPagamentoReqGps other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CodPagamento == other.CodPagamento ||
                    CodPagamento != null &&
                    CodPagamento.Equals(other.CodPagamento)
                ) && 
                (
                    DataCompetencia == other.DataCompetencia ||
                    DataCompetencia != null &&
                    DataCompetencia.Equals(other.DataCompetencia)
                ) && 
                (
                    Identificador == other.Identificador ||
                    Identificador != null &&
                    Identificador.Equals(other.Identificador)
                ) && 
                (
                    ValorInss == other.ValorInss ||
                    ValorInss != null &&
                    ValorInss.Equals(other.ValorInss)
                ) && 
                (
                    ValorMulta == other.ValorMulta ||
                    ValorMulta != null &&
                    ValorMulta.Equals(other.ValorMulta)
                ) && 
                (
                    ValorOutros == other.ValorOutros ||
                    ValorOutros != null &&
                    ValorOutros.Equals(other.ValorOutros)
                ) && 
                (
                    ValorTotal == other.ValorTotal ||
                    ValorTotal != null &&
                    ValorTotal.Equals(other.ValorTotal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CodPagamento != null)
                    hashCode = hashCode * 59 + CodPagamento.GetHashCode();
                    if (DataCompetencia != null)
                    hashCode = hashCode * 59 + DataCompetencia.GetHashCode();
                    if (Identificador != null)
                    hashCode = hashCode * 59 + Identificador.GetHashCode();
                    if (ValorInss != null)
                    hashCode = hashCode * 59 + ValorInss.GetHashCode();
                    if (ValorMulta != null)
                    hashCode = hashCode * 59 + ValorMulta.GetHashCode();
                    if (ValorOutros != null)
                    hashCode = hashCode * 59 + ValorOutros.GetHashCode();
                    if (ValorTotal != null)
                    hashCode = hashCode * 59 + ValorTotal.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfPagamentoReqGps left, InfPagamentoReqGps right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfPagamentoReqGps left, InfPagamentoReqGps right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
