/*
 * Saque e Pague Transacional
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.17.1-sw2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Informações para consultas de DDA.
    /// </summary>
    [DataContract]
    public partial class InfDDA : IEquatable<InfDDA>
    { 
        /// <summary>
        /// Possível pagar parcialmente (00 = não, 01 = sim).
        /// </summary>
        /// <value>Possível pagar parcialmente (00 = não, 01 = sim).</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AceitaPagamentoParcialEnum
        {
            
            /// <summary>
            /// Enum _00Enum for 00
            /// </summary>
            [EnumMember(Value = "00")]
            _00Enum = 1,
            
            /// <summary>
            /// Enum _01Enum for 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01Enum = 2
        }

        /// <summary>
        /// Possível pagar parcialmente (00 &#x3D; não, 01 &#x3D; sim).
        /// </summary>
        /// <value>Possível pagar parcialmente (00 &#x3D; não, 01 &#x3D; sim).</value>
        [DataMember(Name="aceitaPagamentoParcial")]
        public AceitaPagamentoParcialEnum? AceitaPagamentoParcial { get; set; }

        /// <summary>
        /// Alegação.
        /// </summary>
        /// <value>Alegação.</value>
        [Required]
        [DataMember(Name="alegacao")]
        public string Alegacao { get; set; }

        /// <summary>
        /// Cedente.
        /// </summary>
        /// <value>Cedente.</value>
        [DataMember(Name="cedente")]
        public string Cedente { get; set; }

        /// <summary>
        /// Data de vencimento (AAAAMMDD).
        /// </summary>
        /// <value>Data de vencimento (AAAAMMDD).</value>
        [Required]
        [DataMember(Name="dataVencimento")]
        public string DataVencimento { get; set; }

        /// <summary>
        /// Flag que indica se houve alteração (00 = não, 01 = sim).
        /// </summary>
        /// <value>Flag que indica se houve alteração (00 = não, 01 = sim).</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ModificadoEnum
        {
            
            /// <summary>
            /// Enum _00Enum for 00
            /// </summary>
            [EnumMember(Value = "00")]
            _00Enum = 1,
            
            /// <summary>
            /// Enum _01Enum for 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01Enum = 2
        }

        /// <summary>
        /// Flag que indica se houve alteração (00 &#x3D; não, 01 &#x3D; sim).
        /// </summary>
        /// <value>Flag que indica se houve alteração (00 &#x3D; não, 01 &#x3D; sim).</value>
        [Required]
        [DataMember(Name="modificado")]
        public ModificadoEnum? Modificado { get; set; }

        /// <summary>
        /// Identificador do DDA.
        /// </summary>
        /// <value>Identificador do DDA.</value>
        [Required]
        [DataMember(Name="numDDA")]
        public string NumDDA { get; set; }

        /// <summary>
        /// Sacado.
        /// </summary>
        /// <value>Sacado.</value>
        [Required]
        [DataMember(Name="sacado")]
        public string Sacado { get; set; }

        /// <summary>
        /// Tipo do DDA.
        /// </summary>
        /// <value>Tipo do DDA.</value>
        [Required]
        [DataMember(Name="tipo")]
        public string Tipo { get; set; }

        /// <summary>
        /// Valor do DDA (12 dígitos, incluindo centavos).
        /// </summary>
        /// <value>Valor do DDA (12 dígitos, incluindo centavos).</value>
        [Required]
        [DataMember(Name="valor")]
        public string Valor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InfDDA {\n");
            sb.Append("  AceitaPagamentoParcial: ").Append(AceitaPagamentoParcial).Append("\n");
            sb.Append("  Alegacao: ").Append(Alegacao).Append("\n");
            sb.Append("  Cedente: ").Append(Cedente).Append("\n");
            sb.Append("  DataVencimento: ").Append(DataVencimento).Append("\n");
            sb.Append("  Modificado: ").Append(Modificado).Append("\n");
            sb.Append("  NumDDA: ").Append(NumDDA).Append("\n");
            sb.Append("  Sacado: ").Append(Sacado).Append("\n");
            sb.Append("  Tipo: ").Append(Tipo).Append("\n");
            sb.Append("  Valor: ").Append(Valor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InfDDA)obj);
        }

        /// <summary>
        /// Returns true if InfDDA instances are equal
        /// </summary>
        /// <param name="other">Instance of InfDDA to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InfDDA other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AceitaPagamentoParcial == other.AceitaPagamentoParcial ||
                    AceitaPagamentoParcial != null &&
                    AceitaPagamentoParcial.Equals(other.AceitaPagamentoParcial)
                ) && 
                (
                    Alegacao == other.Alegacao ||
                    Alegacao != null &&
                    Alegacao.Equals(other.Alegacao)
                ) && 
                (
                    Cedente == other.Cedente ||
                    Cedente != null &&
                    Cedente.Equals(other.Cedente)
                ) && 
                (
                    DataVencimento == other.DataVencimento ||
                    DataVencimento != null &&
                    DataVencimento.Equals(other.DataVencimento)
                ) && 
                (
                    Modificado == other.Modificado ||
                    Modificado != null &&
                    Modificado.Equals(other.Modificado)
                ) && 
                (
                    NumDDA == other.NumDDA ||
                    NumDDA != null &&
                    NumDDA.Equals(other.NumDDA)
                ) && 
                (
                    Sacado == other.Sacado ||
                    Sacado != null &&
                    Sacado.Equals(other.Sacado)
                ) && 
                (
                    Tipo == other.Tipo ||
                    Tipo != null &&
                    Tipo.Equals(other.Tipo)
                ) && 
                (
                    Valor == other.Valor ||
                    Valor != null &&
                    Valor.Equals(other.Valor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AceitaPagamentoParcial != null)
                    hashCode = hashCode * 59 + AceitaPagamentoParcial.GetHashCode();
                    if (Alegacao != null)
                    hashCode = hashCode * 59 + Alegacao.GetHashCode();
                    if (Cedente != null)
                    hashCode = hashCode * 59 + Cedente.GetHashCode();
                    if (DataVencimento != null)
                    hashCode = hashCode * 59 + DataVencimento.GetHashCode();
                    if (Modificado != null)
                    hashCode = hashCode * 59 + Modificado.GetHashCode();
                    if (NumDDA != null)
                    hashCode = hashCode * 59 + NumDDA.GetHashCode();
                    if (Sacado != null)
                    hashCode = hashCode * 59 + Sacado.GetHashCode();
                    if (Tipo != null)
                    hashCode = hashCode * 59 + Tipo.GetHashCode();
                    if (Valor != null)
                    hashCode = hashCode * 59 + Valor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InfDDA left, InfDDA right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InfDDA left, InfDDA right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
