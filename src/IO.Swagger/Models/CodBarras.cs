/*
 * Saque e Pague Transaction
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.17.0
 * Contact: captura_atm@saqueepague.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CodBarras : IEquatable<CodBarras>
    { 
        /// <summary>
        /// Código de barras.
        /// </summary>
        /// <value>Código de barras.</value>
        [DataMember(Name="codigo")]
        public string Codigo { get; set; }
        /// <summary>
        /// Gets or Sets ModoEntrada
        /// </summary>
        public enum ModoEntrada2
        { 
            /// <summary>
            /// Enum _0Enum for 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0Enum = 1,
            
            /// <summary>
            /// Enum _1Enum for 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1Enum = 2
        }

        /// <summary>
        /// Gets or Sets ModoEntrada
        /// </summary>
        [DataMember(Name="modoEntrada")]
        public ModoEntrada2? ModoEntrada { get; set; }

        /// <summary>
        /// Data em que o pagamento do Boleto/Título será realizado. Utilizado para pagamento agendado (AAAAMMDD).
        /// </summary>
        /// <value>Data em que o pagamento do Boleto/Título será realizado. Utilizado para pagamento agendado (AAAAMMDD).</value>
        [DataMember(Name="dataAgendamento")]
        public string DataAgendamento { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodBarras {\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  ModoEntrada: ").Append(ModoEntrada).Append("\n");
            sb.Append("  DataAgendamento: ").Append(DataAgendamento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CodBarras)obj);
        }

        /// <summary>
        /// Returns true if CodBarras instances are equal
        /// </summary>
        /// <param name="other">Instance of CodBarras to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodBarras other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Codigo == other.Codigo ||
                    Codigo != null &&
                    Codigo.Equals(other.Codigo)
                ) && 
                (
                    ModoEntrada == other.ModoEntrada ||
                    ModoEntrada != null &&
                    ModoEntrada.Equals(other.ModoEntrada)
                ) && 
                (
                    DataAgendamento == other.DataAgendamento ||
                    DataAgendamento != null &&
                    DataAgendamento.Equals(other.DataAgendamento)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Codigo != null)
                    hashCode = hashCode * 59 + Codigo.GetHashCode();
                    if (ModoEntrada != null)
                    hashCode = hashCode * 59 + ModoEntrada.GetHashCode();
                    if (DataAgendamento != null)
                    hashCode = hashCode * 59 + DataAgendamento.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CodBarras left, CodBarras right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CodBarras left, CodBarras right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
