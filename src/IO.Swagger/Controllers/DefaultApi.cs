/*
 * Saque e Pague Transaction
 *
 * Modelo de API para transações da Saque e Pague. O parceiro interessado deve implementar as operações desejadas para que a SeP consiga se comunicar com o mesmo.
 *
 * OpenAPI spec version: 1.17.0
 * Contact: captura_atm@saqueepague.com.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : Controller
    { 
        /// <summary>
        /// Autenticacao_POST
        /// </summary>
        /// <remarks>Operação de autenticacao de cliente.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de autenticação.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/autenticacao")]
        [ValidateModelState]
        [SwaggerOperation("AutenticacaoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AutenticacaoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult AutenticacaoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]AutenticacaoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AutenticacaoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  },\n  \"InfAutenticacao\" : {\n    \"nomeCliente\" : \"Carl Edward Sagan\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AutenticacaoResp>(exampleJson)
            : default(AutenticacaoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CancelaAgendamento_POST
        /// </summary>
        /// <remarks>Cancela um pagamento que está agendado.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Dados de identificação do agendamento.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/cancelaAgendamento")]
        [ValidateModelState]
        [SwaggerOperation("CancelaAgendamentoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(AgendamentoIdentificaoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult CancelaAgendamentoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]AgendamentoIdentificaoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AgendamentoIdentificaoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfAgendamento\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n    \"valorNominal\" : \"000000005000\",\n    \"dataPagamento\" : \"20181122\",\n    \"valorJurosCalculado\" : \"000000000499\",\n    \"valorTotal\" : \"000000005499\",\n    \"modoEntrada\" : 0,\n    \"modificado\" : 0,\n    \"valorAbatimento\" : \"000000000499\",\n    \"codigoBarras\" : \"84729304827364829301567829304562229483471004\",\n    \"cedente\" : \"Cedente\",\n    \"valorMultaCalculadada\" : \"000000000499\"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AgendamentoIdentificaoResp>(exampleJson)
            : default(AgendamentoIdentificaoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// CompraTitulosCapitalizacaoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de compra de títulos de capitalização.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de compra de titulos de capitalizacao</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/compraTitulosCapitalizacaoConf")]
        [ValidateModelState]
        [SwaggerOperation("CompraTitulosCapitalizacaoConfPost")]
        public virtual IActionResult CompraTitulosCapitalizacaoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// CompraTitulosCapitalizacao_POST
        /// </summary>
        /// <remarks>Operação de compra de títulos de capitalização.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de compra de títulos de capitalização.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/compraTitulosCapitalizacao")]
        [ValidateModelState]
        [SwaggerOperation("CompraTitulosCapitalizacaoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(CompraTitulosCapitalizacaoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult CompraTitulosCapitalizacaoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]CompraTitulosCapitalizacaoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CompraTitulosCapitalizacaoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfCompraTitulosCapitalizacao\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CompraTitulosCapitalizacaoResp>(exampleJson)
            : default(CompraTitulosCapitalizacaoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaAgendamentos_POST
        /// </summary>
        /// <remarks>Operação de consulta de pagamentos agendados.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaAgendamentos")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaAgendamentosPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaAgendamentoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaAgendamentosPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaAgendamentoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  },\n  \"InfoAgendamentos\" : [ {\n    \"dataPagamento\" : \"20181122\",\n    \"dataVencimento\" : \"20181122\",\n    \"valorTotal\" : \"000000005000\",\n    \"id\" : \"234\",\n    \"cedente\" : \"Cedente\"\n  }, {\n    \"dataPagamento\" : \"20181122\",\n    \"dataVencimento\" : \"20181122\",\n    \"valorTotal\" : \"000000005000\",\n    \"id\" : \"234\",\n    \"cedente\" : \"Cedente\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaAgendamentoResp>(exampleJson)
            : default(ConsultaAgendamentoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaComprovantePagamento_POST
        /// </summary>
        /// <remarks>Obtém a segunda via do comprovante de um pagamento já efetuado.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Dados de identificação do pagamento a qual deseja-se obter uma segunda via do comprovante.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaComprovantePagamento")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaComprovantePagamentoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InfPagamentoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaComprovantePagamentoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]InfPagamentoComprovanteReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InfPagamentoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n  \"qtdeViasComprovante\" : \"1\",\n  \"dataPagamento\" : \"20181122\",\n  \"desconto\" : \"000000000499\",\n  \"cupom\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n  \"mensagem\" : \"mensagem\",\n  \"valor\" : \"000000005000\",\n  \"sistemaCobranca\" : 0,\n  \"cedente\" : \"Cedente\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InfPagamentoResp>(exampleJson)
            : default(InfPagamentoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaComprovantes_POST
        /// </summary>
        /// <remarks>Operação de consulta de pagamentos já efetuados.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaComprovantes")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaComprovantesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaComprovantesResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaComprovantesPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaComprovantesResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfComprovantes\" : [ {\n    \"dataPagamento\" : \"20181122\",\n    \"dataVencimento\" : \"20181122\",\n    \"valor\" : \"000000005000\",\n    \"id\" : \"036200001842241\",\n    \"cedente\" : \"Cedente\"\n  }, {\n    \"dataPagamento\" : \"20181122\",\n    \"dataVencimento\" : \"20181122\",\n    \"valor\" : \"000000005000\",\n    \"id\" : \"036200001842241\",\n    \"cedente\" : \"Cedente\"\n  } ],\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaComprovantesResp>(exampleJson)
            : default(ConsultaComprovantesResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaConta_POST
        /// </summary>
        /// <remarks>Operação de consulta de conta.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta de conta.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaConta")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaContaPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaContaResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaContaPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaContaReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaContaResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaConta\" : {\n    \"solicDoc\" : 0,\n    \"modalidadeDeposito\" : 0,\n    \"nomeCliente\" : \"Carl Edward Sagan\",\n    \"habilitaDeposito\" : 0,\n    \"depositoIdentificado\" : 0\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaContaResp>(exampleJson)
            : default(ConsultaContaResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaLimitesEmprestimo_POST
        /// </summary>
        /// <remarks>Operação de consulta dos limites disponíveis para empréstimo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta limites de empréstimo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaLimitesEmprestimo")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaLimitesEmprestimoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaLimitesEmprestimoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaLimitesEmprestimoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaLimitesEmprestimoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaLimitesEmprestimoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaLimitesEmprestimo\" : {\n    \"limiteMinimoEmprestimo\" : \"000000500000\",\n    \"limiteMaximoEmprestimo\" : \"000005000000\",\n    \"nomeAgenciaBancaria\" : \"Agência bancária\",\n    \"nomeTitularConta\" : \"Carl Edward Sagan\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaLimitesEmprestimoResp>(exampleJson)
            : default(ConsultaLimitesEmprestimoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaPagamento_POST
        /// </summary>
        /// <remarks>Operação de consulta de pagamentos.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta de pagamentos.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaPagamento")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaPagamentoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaPagamentoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaPagamentoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaPagamentoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaPagamentoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  },\n  \"InfConsultaPagamento\" : {\n    \"aceitaPagamentoParcial\" : 0,\n    \"dda\" : [ {\n      \"aceitaPagamentoParcial\" : 0,\n      \"tipo\" : \"tipo\",\n      \"numDDA\" : \"7123\",\n      \"sacado\" : \"sacado\",\n      \"dataVencimento\" : \"20181122\",\n      \"valor\" : \"000000005000\",\n      \"alegacao\" : \"alegacao\",\n      \"modificado\" : 0,\n      \"cedente\" : \"Cedente\"\n    }, {\n      \"aceitaPagamentoParcial\" : 0,\n      \"tipo\" : \"tipo\",\n      \"numDDA\" : \"7123\",\n      \"sacado\" : \"sacado\",\n      \"dataVencimento\" : \"20181122\",\n      \"valor\" : \"000000005000\",\n      \"alegacao\" : \"alegacao\",\n      \"modificado\" : 0,\n      \"cedente\" : \"Cedente\"\n    } ],\n    \"dataPagamento\" : \"20181122\",\n    \"nomeFavorecidoDoacao\" : \"Carl Edward Sagan\",\n    \"desconto\" : \"000000000499\",\n    \"valor\" : \"valor\",\n    \"cnpjFavorecidoDoacao\" : \"cnpjFavorecidoDoacao\",\n    \"modificado\" : 0,\n    \"sistemaCobranca\" : 0,\n    \"cip\" : {\n      \"valorMaximoPermitidoPagamento\" : \"000000050000\",\n      \"NumeroIdentificacaoConsultaPagamento\" : \"NumeroIdentificacaoConsultaPagamento\",\n      \"valorMinimoPermitidoPagamento\" : \"000000000500\",\n      \"valorJurosCalculado\" : \"000000000499\",\n      \"valorAbatimento\" : \"000000000499\",\n      \"tipoValorAceito\" : \"tipoValorAceito\",\n      \"valorMultaCalculadada\" : \"000000000499\"\n    },\n    \"valorMinimo\" : \"000000000500\",\n    \"cedente\" : \"Cedente\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaPagamentoResp>(exampleJson)
            : default(ConsultaPagamentoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaParcelasEmprestimo_POST
        /// </summary>
        /// <remarks>Operação de consulta das parcelas do empréstimo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta parcelas de empréstimo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaParcelasEmprestimo")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaParcelasEmprestimoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaParcelasEmprestimoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaParcelasEmprestimoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaParcelasEmprestimoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaParcelasEmprestimoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfConsultaParcelasEmprestimo\" : {\n    \"opcoesParcelas\" : [ {\n      \"valorParcela\" : \"000000005000\",\n      \"qntParcelas\" : \"5\"\n    }, {\n      \"valorParcela\" : \"000000005000\",\n      \"qntParcelas\" : \"5\"\n    } ],\n    \"dataPrimeiraParcela\" : \"20181122\"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaParcelasEmprestimoResp>(exampleJson)
            : default(ConsultaParcelasEmprestimoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaProdutosRecarga_POST
        /// </summary>
        /// <remarks>Operação de consulta dos possíveis produtos de recarga de uma operadora.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta produtos de recarga.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaProdutosRecarga")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaProdutosRecargaPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaProdutosRecargaResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaProdutosRecargaPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaProdutosRecargaReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaProdutosRecargaResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaProdutosRecarga\" : {\n    \"products\" : [ {\n      \"name\" : \"Produto novo\",\n      \"id\" : \"5\"\n    }, {\n      \"name\" : \"Produto novo\",\n      \"id\" : \"5\"\n    } ]\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaProdutosRecargaResp>(exampleJson)
            : default(ConsultaProdutosRecargaResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaSaque_POST
        /// </summary>
        /// <remarks>Operação de consulta de saque.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta de saque.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaSaque")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaSaquePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaSaqueResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaSaquePost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaSaqueReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaSaqueResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  },\n  \"InfConsultaSaque\" : {\n    \"perguntas\" : [ {\n      \"pergunta\" : \"Qual o nome do seu primeiro animal de estimação?\",\n      \"tamResposta\" : \"27\",\n      \"id\" : \"1\"\n    }, {\n      \"pergunta\" : \"Qual o nome do seu primeiro animal de estimação?\",\n      \"tamResposta\" : \"27\",\n      \"id\" : \"1\"\n    } ],\n    \"nomeCliente\" : \"Carl Edward Sagan\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaSaqueResp>(exampleJson)
            : default(ConsultaSaqueResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaTaxas_POST
        /// </summary>
        /// <remarks>Operação de consulta de taxas.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta de taxas.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaTaxas")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaTaxasPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaTaxasResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaTaxasPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaTaxasReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaTaxasResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaTaxas\" : {\n    \"transactions_fees\" : [ {\n      \"fees\" : [ {\n        \"min_amount\" : \"000\",\n        \"max_amount\" : \"10000\",\n        \"id\" : \"0201\",\n        \"value\" : \"000\"\n      }, {\n        \"min_amount\" : \"000\",\n        \"max_amount\" : \"10000\",\n        \"id\" : \"0201\",\n        \"value\" : \"000\"\n      } ],\n      \"name\" : \"deposit\",\n      \"id\" : \"01\"\n    }, {\n      \"fees\" : [ {\n        \"min_amount\" : \"000\",\n        \"max_amount\" : \"10000\",\n        \"id\" : \"0201\",\n        \"value\" : \"000\"\n      }, {\n        \"min_amount\" : \"000\",\n        \"max_amount\" : \"10000\",\n        \"id\" : \"0201\",\n        \"value\" : \"000\"\n      } ],\n      \"name\" : \"deposit\",\n      \"id\" : \"01\"\n    } ]\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaTaxasResp>(exampleJson)
            : default(ConsultaTaxasResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaTitulosCapitalizacao_POST
        /// </summary>
        /// <remarks>Operação de consulta dos possíveis produtos de títulos de capitalização de uma operadora.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta produtos de títulos de capitalização.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaTitulosCapitalizacao")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaTitulosCapitalizacaoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaTitulosCapitalizacaoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaTitulosCapitalizacaoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaTitulosCapitalizacaoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaTitulosCapitalizacaoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaTitulosCapitalizacao\" : {\n    \"produtos\" : [ {\n      \"limiteMaximoCompra\" : \"4\",\n      \"tema\" : {\n        \"estilos\" : [ {\n          \"valor\" : \"#00288C\",\n          \"nome\" : \"cor-fundo ou cor-botao\"\n        }, {\n          \"valor\" : \"#00288C\",\n          \"nome\" : \"cor-fundo ou cor-botao\"\n        } ]\n      },\n      \"valor\" : \"000000000500\",\n      \"nome\" : \"Grêmio Mais\",\n      \"id\" : \"7\",\n      \"dataFimVigencia\" : \"20181130\",\n      \"detalhes\" : \"Edição ouro de mais um produto do Grêmio Mais\",\n      \"dataInicioVigencia\" : \"20181122\",\n      \"descricao\" : \"Edição 115 Anos\"\n    }, {\n      \"limiteMaximoCompra\" : \"4\",\n      \"tema\" : {\n        \"estilos\" : [ {\n          \"valor\" : \"#00288C\",\n          \"nome\" : \"cor-fundo ou cor-botao\"\n        }, {\n          \"valor\" : \"#00288C\",\n          \"nome\" : \"cor-fundo ou cor-botao\"\n        } ]\n      },\n      \"valor\" : \"000000000500\",\n      \"nome\" : \"Grêmio Mais\",\n      \"id\" : \"7\",\n      \"dataFimVigencia\" : \"20181130\",\n      \"detalhes\" : \"Edição ouro de mais um produto do Grêmio Mais\",\n      \"dataInicioVigencia\" : \"20181122\",\n      \"descricao\" : \"Edição 115 Anos\"\n    } ]\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaTitulosCapitalizacaoResp>(exampleJson)
            : default(ConsultaTitulosCapitalizacaoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ConsultaValoresRecarga_POST
        /// </summary>
        /// <remarks>Operação de consulta dos possíveis valores de recarga.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de consulta valores de recarga.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/consultaValoresRecarga")]
        [ValidateModelState]
        [SwaggerOperation("ConsultaValoresRecargaPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaValoresRecargaResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ConsultaValoresRecargaPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ConsultaValoresRecargaReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConsultaValoresRecargaResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfConsultaValoresRecarga\" : {\n    \"valores\" : {\n      \"issuers\" : [ {\n        \"card_number_mask\" : \"XXXXXXXXXXXXXX-X\",\n        \"card_number_length\" : 15,\n        \"name\" : \"TEU\",\n        \"id\" : 1,\n        \"products\" : [ {\n          \"min_value\" : \"1000\",\n          \"fee\" : \"200\",\n          \"values\" : [ {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          }, {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          } ],\n          \"name\" : \"Bilhete Antecipado\",\n          \"id\" : \"7\",\n          \"max_value\" : \"9000\"\n        }, {\n          \"min_value\" : \"1000\",\n          \"fee\" : \"200\",\n          \"values\" : [ {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          }, {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          } ],\n          \"name\" : \"Bilhete Antecipado\",\n          \"id\" : \"7\",\n          \"max_value\" : \"9000\"\n        } ]\n      }, {\n        \"card_number_mask\" : \"XXXXXXXXXXXXXX-X\",\n        \"card_number_length\" : 15,\n        \"name\" : \"TEU\",\n        \"id\" : 1,\n        \"products\" : [ {\n          \"min_value\" : \"1000\",\n          \"fee\" : \"200\",\n          \"values\" : [ {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          }, {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          } ],\n          \"name\" : \"Bilhete Antecipado\",\n          \"id\" : \"7\",\n          \"max_value\" : \"9000\"\n        }, {\n          \"min_value\" : \"1000\",\n          \"fee\" : \"200\",\n          \"values\" : [ {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          }, {\n            \"fee\" : \"200\",\n            \"id\" : \"1\",\n            \"value\" : \"2000\"\n          } ],\n          \"name\" : \"Bilhete Antecipado\",\n          \"id\" : \"7\",\n          \"max_value\" : \"9000\"\n        } ]\n      } ]\n    }\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConsultaValoresRecargaResp>(exampleJson)
            : default(ConsultaValoresRecargaResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// DepositoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de depósito.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de depósito.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/depositoConf")]
        [ValidateModelState]
        [SwaggerOperation("DepositoConfPost")]
        public virtual IActionResult DepositoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Deposito_POST
        /// </summary>
        /// <remarks>Operação de depósito.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de depósito.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/deposito")]
        [ValidateModelState]
        [SwaggerOperation("DepositoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(DepositoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult DepositoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]DepositoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DepositoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  },\n  \"InfDeposito\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DepositoResp>(exampleJson)
            : default(DepositoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// EmprestimoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de empréstimo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de empréstimo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/emprestimoConf")]
        [ValidateModelState]
        [SwaggerOperation("EmprestimoConfPost")]
        public virtual IActionResult EmprestimoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Emprestimo_POST
        /// </summary>
        /// <remarks>Operação de empréstimo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de empréstimo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/emprestimo")]
        [ValidateModelState]
        [SwaggerOperation("EmprestimoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmprestimoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult EmprestimoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]EmprestimoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmprestimoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EmprestimoResp>(exampleJson)
            : default(EmprestimoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ExtratoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de extrato.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de extrato.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/extratoConf")]
        [ValidateModelState]
        [SwaggerOperation("ExtratoConfPost")]
        public virtual IActionResult ExtratoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Extrato_POST
        /// </summary>
        /// <remarks>Operação de extrato.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de extrato.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/extrato")]
        [ValidateModelState]
        [SwaggerOperation("ExtratoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExtratoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ExtratoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ExtratoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ExtratoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfExtrato\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ExtratoResp>(exampleJson)
            : default(ExtratoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Identificacao_POST
        /// </summary>
        /// <remarks>Operação de identificação de cliente através do cartão.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de identificação.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/identificacao")]
        [ValidateModelState]
        [SwaggerOperation("IdentificacaoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(IdentificacaoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult IdentificacaoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]IdentificacaoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IdentificacaoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"InfIdentificacao\" : {\n    \"pedirToken\" : 0,\n    \"frase\" : \"Por favor, se identifique.\",\n    \"perguntas\" : [ {\n      \"pergunta\" : \"Qual a sua senha?\",\n      \"resposta\" : \"mimimi\",\n      \"tamResposta\" : \"6\",\n      \"id\" : \"1\"\n    }, {\n      \"pergunta\" : \"Qual a sua senha?\",\n      \"resposta\" : \"mimimi\",\n      \"tamResposta\" : \"6\",\n      \"id\" : \"1\"\n    } ],\n    \"idPositiva\" : [ {\n      \"pos8\" : \"A-C-D-3\",\n      \"idTela\" : \"1\",\n      \"pos4\" : \"A-C-D-3\",\n      \"pos5\" : \"A-C-D-3\",\n      \"pos6\" : \"A-C-D-3\",\n      \"pos7\" : \"A-C-D-3\",\n      \"pos1\" : \"A-C-D-3\",\n      \"pos2\" : \"A-C-D-3\",\n      \"pos3\" : \"A-C-D-3\"\n    }, {\n      \"pos8\" : \"A-C-D-3\",\n      \"idTela\" : \"1\",\n      \"pos4\" : \"A-C-D-3\",\n      \"pos5\" : \"A-C-D-3\",\n      \"pos6\" : \"A-C-D-3\",\n      \"pos7\" : \"A-C-D-3\",\n      \"pos1\" : \"A-C-D-3\",\n      \"pos2\" : \"A-C-D-3\",\n      \"pos3\" : \"A-C-D-3\"\n    } ],\n    \"transacValidas\" : \"068101068010\",\n    \"saldo\" : \"saldo\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IdentificacaoResp>(exampleJson)
            : default(IdentificacaoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// PagamentoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de pagamento ou agendamento de pagamento.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de pagamento ou agendamento de pagamento.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/pagamentoConf")]
        [ValidateModelState]
        [SwaggerOperation("PagamentoConfPost")]
        public virtual IActionResult PagamentoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Pagamento_POST
        /// </summary>
        /// <remarks>Operação de pagamento ou agendamento de pagamento.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de pagamento ou agendamento de pagamento.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/pagamento")]
        [ValidateModelState]
        [SwaggerOperation("PagamentoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(PagamentoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult PagamentoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]PagamentoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PagamentoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfPagamentoResp\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n    \"qtdeViasComprovante\" : \"1\",\n    \"dataPagamento\" : \"20181122\",\n    \"desconto\" : \"000000000499\",\n    \"cupom\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n    \"mensagem\" : \"mensagem\",\n    \"valor\" : \"000000005000\",\n    \"sistemaCobranca\" : 0,\n    \"cedente\" : \"Cedente\"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PagamentoResp>(exampleJson)
            : default(PagamentoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// RecargaConf_POST
        /// </summary>
        /// <remarks>Operação de confirmação de recarga.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de recarga.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/recargaConf")]
        [ValidateModelState]
        [SwaggerOperation("RecargaConfPost")]
        public virtual IActionResult RecargaConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Recarga_POST
        /// </summary>
        /// <remarks>Operação de recarga.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de recarga.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/recarga")]
        [ValidateModelState]
        [SwaggerOperation("RecargaPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(RecargaResp), description: "Retorno com sucesso.")]
        public virtual IActionResult RecargaPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]RecargaReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RecargaResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfRecarga\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RecargaResp>(exampleJson)
            : default(RecargaResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// ReimpressaoComprovante_POST
        /// </summary>
        /// <remarks>Imprime segunda via de um comprovante de pagamento.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Dados de identificação do comprovante de pgamento.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/reimpressaoComprovante")]
        [ValidateModelState]
        [SwaggerOperation("ReimpressaoComprovantePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ReimpressaoComprovanteResp), description: "Retorno com sucesso.")]
        public virtual IActionResult ReimpressaoComprovantePost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]ReimpressaoComprovanteReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ReimpressaoComprovanteResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfReimpressaoComprovante\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \",\n    \"dataPagamento\" : \"20181122\",\n    \"dataVencimento\" : \"20181122\",\n    \"valor\" : \"000000005000\",\n    \"id\" : \"047382754927145\",\n    \"cedente\" : \"Cedente\"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ReimpressaoComprovanteResp>(exampleJson)
            : default(ReimpressaoComprovanteResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// SaldoConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de consulta de saldo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de consulta de saldo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/saldoConf")]
        [ValidateModelState]
        [SwaggerOperation("SaldoConfPost")]
        public virtual IActionResult SaldoConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Saldo_POST
        /// </summary>
        /// <remarks>Operação de consulta de saldo.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de consulta de saldo.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/saldo")]
        [ValidateModelState]
        [SwaggerOperation("SaldoPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SaldoResp), description: "Retorno com sucesso.")]
        public virtual IActionResult SaldoPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]SaldoReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SaldoResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfSaldo\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SaldoResp>(exampleJson)
            : default(SaldoResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// SaqueConf_POST
        /// </summary>
        /// <remarks>Confirmação de operação de saque.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de confirmação de operação de saque.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/saqueConf")]
        [ValidateModelState]
        [SwaggerOperation("SaqueConfPost")]
        public virtual IActionResult SaqueConfPost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]TransacConf body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Saque_POST
        /// </summary>
        /// <remarks>Operação de saque.</remarks>
        /// <param name="authenticationType">Tipo de autenticação requerida.</param>
        /// <param name="clientId">Identificação do cliente.</param>
        /// <param name="token">Chave para validação do acesso ao serviço.</param>
        /// <param name="body">Requisição de operação de saque.</param>
        /// <response code="200">Retorno com sucesso.</response>
        [HttpPost]
        [Route("/saqueepague/SepTransaction/1.17.0/saque")]
        [ValidateModelState]
        [SwaggerOperation("SaquePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SaqueResp), description: "Retorno com sucesso.")]
        public virtual IActionResult SaquePost([FromHeader][Required()]string authenticationType, [FromHeader][Required()]string clientId, [FromHeader][Required()]string token, [FromBody]SaqueReq body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SaqueResp));

            string exampleJson = null;
            exampleJson = "{\n  \"InfSaque\" : {\n    \"recibo\" : \"             TEU BILHETE ANTECIPADO             @                036200005433591                @               13/10/2018  20:24               @           VALOR DA RECARGA: R$ 48,00           @                 TAXAS: R$ 2,00                 @              TOTAL PAGO: R$ 50,00              @   OS CRÉDITOS ADQUIRIDOS ESTARÃO DISPONÍVEIS   @      NOS VALIDADORES DOS ÔNIBUS DA REGIÃO      @     METROPOLITANA QUE ACEITAM O CARTÃO TEU     @ OU NAS CATRACAS DO METRÔ, NOS SEGUINTES PRAZOS @            RECARGAS ATÉ O MEIO DIA:            @ CRÉDITOS DISPONÍVEIS NO DIA SEGUINTE DA COMPRA @           RECARGAS APÓS O MEIO DIA:           @   CRÉDITOS DISPONÍVEIS EM 48H APÓS A COMPRA   \"\n  },\n  \"InfTransacao\" : {\n    \"cdProc\" : \"029100\",\n    \"mensagemCliente\" : \"Não foi possível validar o cartão.\",\n    \"nsu\" : \"000080247206\",\n    \"codMoeda\" : \"986\",\n    \"codOperadora\" : \"00000000914\",\n    \"dataLocal\" : \"1122\",\n    \"valor\" : \"5000\",\n    \"errorMessage\" : \"Cartão inválido.\",\n    \"nsuResposta\" : \"820\",\n    \"horaLocal\" : \"151032\",\n    \"dataHora\" : \"1122151032\"\n  },\n  \"Terminal\" : {\n    \"codEstab\" : \"000000000742673\",\n    \"tipo\" : \"008\",\n    \"id\" : \"05100004\"\n  },\n  \"Cripto\" : {\n    \"hash\" : \"hash\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SaqueResp>(exampleJson)
            : default(SaqueResp);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
